name: Maturin Build + PGO + Publish (multi-platform)

on:
  push:
    tags:
      - 'v*'  # publish to PyPI when version tags are pushed
  workflow_dispatch:  # manual trigger â†’ publish to TestPyPI

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: Build on ${{ matrix.os }} with Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.9, 3.10, 3.11, 3.12, 3.13, 3.14]
      fail-fast: false

    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: full

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Prepare profiling directory
        shell: bash
        run: mkdir -p ${{ github.workspace }}/profdata

      - name: Build instrumented wheel (profile-generate)
        uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          args: >
            --release
            --out pgo-wheel
          rust-toolchain: stable
        env:
          RUSTFLAGS: '-Cprofile-generate=${{ github.workspace }}/profdata'

      - name: Install deps and run profiling
        shell: bash
        run: |
          python -m pip install -U pip wheel build
          pip install ./pgo-wheel/*.whl --force-reinstall
          pip install pydantic

          echo "Running PGO workload by importing 'safe' examples..."
          python -c "import examples.basic"
          python -c "import examples.different_request_types"
          python -c "import examples.fastrapi_types"
          python -c "import examples.pydantic_example"

      - name: Detect LLVM profdata tool
        id: detect-profdata
        run: |
          rust_host=$(rustc -Vv | grep host | awk '{print $2}')
          toolchain=$(rustup show active-toolchain | cut -d ' ' -f 1)
          sysroot=$(rustc --print sysroot)
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "LLVM_PROFDATA=$(cygpath -w "$sysroot\\lib\\rustlib\\$rust_host\\bin\\llvm-profdata.exe")" >> "$GITHUB_ENV"
          else
            echo "LLVM_PROFDATA=$sysroot/lib/rustlib/$rust_host/bin/llvm-profdata" >> "$GITHUB_ENV"
          fi
        shell: bash

      - name: Merge PGO data (Linux/Mac)
        if: runner.os != 'Windows'
        shell: bash
        run: ${{ env.LLVM_PROFDATA }} merge -o merged.profdata profdata

      - name: Merge PGO data (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "${{ env.LLVM_PROFDATA }}" merge -o merged.profdata profdata

      - name: Build PGO-optimized wheel
        uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          args: >
            --release
            --out dist
          rust-toolchain: stable
        env:
          RUSTFLAGS: '-Cprofile-use=${{ github.workspace }}/merged.profdata'

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: pgo-${{ matrix.os }}-py${{ matrix.python }}
          path: dist/*.whl

  publish:
    name: Publish to PyPI or TestPyPI
    runs-on: ubuntu-latest
    needs: build
    environment: publish
    permissions:
      id-token: write
      contents: read
      attestations: write

    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: pgo-*
          merge-multiple: true

      - name: Show collected wheels
        run: ls -R wheels

      - name: Publish to PyPI (tagged release)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheels
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to TestPyPI (manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          packages-dir: wheels
        env:
          PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}